import { dropPuck, isWinner } from "../game";

describe("isWinner", () => {
    test("diagonal right", () => {
        const grid: number[][] = [
            [2, 1, 1, 1, 1, 1],
            [1, 2, 1, 1, 1, 1],
            [1, 1, 2, 1, 1, 1],
            [1, 1, 1, 2, 1, 1],
            [1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1],
        ];
        expect(isWinner(2, grid)).toBe(true);
    });

    test("diagonal left", () => {
        const grid: number[][] = [
            [1, 1, 1, 1, 1, 2],
            [1, 1, 1, 1, 2, 1],
            [1, 1, 1, 2, 1, 1],
            [1, 1, 2, 1, 1, 1],
            [1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1],
        ];
        expect(isWinner(2, grid)).toBe(true);
    });

    test("vertical", () => {
        const grid: number[][] = [
            [1, 1, 1, 2, 1, 1],
            [1, 1, 1, 2, 1, 1],
            [1, 1, 1, 2, 1, 1],
            [1, 1, 1, 2, 1, 1],
            [1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1],
        ];
        expect(isWinner(2, grid)).toBe(true);
    });

    test("horizontal", () => {
        const grid: number[][] = [
            [1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1],
            [2, 2, 2, 2, 1, 1],
            [1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1],
        ];
        expect(isWinner(2, grid)).toBe(true);
    });

    test("no winner", () => {
        const grid: number[][] = [
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 2, 0, 0],
            [0, 0, 0, 1, 2, 0],
            [0, 1, 1, 1, 2, 2],
        ];
        expect(isWinner(2, grid)).toBe(false);
        expect(isWinner(1, grid)).toBe(false);
    });
});

describe("dropPuck", () => {
    test("empty grid", () => {
        const grid: number[][] = [
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
        ];

        const resGrid: number[][] = [
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
        ];

        expect(dropPuck(grid, 1, 1)).toEqual(resGrid);
    });

    test("higher grid", () => {
        const grid: number[][] = [
            [0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
        ];

        const resGrid: number[][] = [
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
        ];

        expect(dropPuck(grid, 1, 1)).toEqual(resGrid);
    });

    test("full grid", () => {
        const grid: number[][] = [
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
        ];

        const resGrid: number[][] = [
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0],
        ];

        expect(dropPuck(grid, 1, 1)).toEqual(resGrid);
    });
});
